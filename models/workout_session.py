from typing import Optional, List
from sqlalchemy import *
from sqlalchemy.orm import Mapped, mapped_column, relationship

from models import Base
from models import workout_step
from models.equipment import Equipment
import enum


class Status(enum.Enum):
    IDLE = 'idle'
    EXERCISING = 'exercising'
    COMPLETE = 'complete'


class WorkoutSession(Base):
    __tablename__ = 'workout_session'

    # Use an autogenerated uuid as primary key
    id: Mapped[str] = mapped_column(String(256), primary_key=True)

    # Entry time in minutes since 6 PM
    entry_time: Mapped[int] = mapped_column(Integer, nullable=False)
    # Cumulative wait time in minutes
    cum_wait_time: Mapped[int] = mapped_column(Integer, nullable=False)
    # TODO: Step of workout in progress or next--this will need to be a relationship
    # This is a one to one relationship

    # TODO: machine being used right now (can be nullable)
    # This is a one to one relationship

    # Status which is enumerated
    status: Mapped[Status] = mapped_column(Enum(Status), nullable=False)

    # TODO: Session will need to be one to many to workout steps
    steps: Mapped[List["WorkoutStep"]] = relationship(
        "WorkoutStep", back_populates="workout_session",
        foreign_keys="WorkoutStep.workout_session_id"
    )
    # TODO: Step of workout in progress or next--this will need to be a relationship

    active_step_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("workout_step.id", name="fk_active_step_id"), nullable=True)
    active_step: Mapped[Optional["WorkoutStep"]] = relationship(
        "WorkoutStep", foreign_keys="[WorkoutSession.active_step_id]")
